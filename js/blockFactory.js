// js/blockFactory.js
// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–ª–æ–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
// --- –ò–ó–ú–ï–ù–ï–ù–û: –í–∫–ª—é—á–µ–Ω spellcheck="true" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
// --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π span.list-marker –¥–ª—è –±–ª–æ–∫–æ–≤ LI ---
// --- –£–î–ê–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ placeholder –¥–ª—è .toggle-title ---
// --- –î–û–ë–ê–í–õ–ï–ù–û: –≠–ª–µ–º–µ–Ω—Ç drag-handle –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è ---
// --- –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∞ 'image' ---

import { getNextBlockIdAndIncrement, setNextBlockId } from './state.js';
import { getToggleTitleElement, getToggleChildrenWrapperElement, getEditableContentElement, getCalloutPrimaryContentElement } from './blockUtils.js';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –±–ª–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * @param {object | null | undefined} blockData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞ (id?, type, html?, listType?, indentLevel?, checked?, inQuote?, children?, titleHtml?, isOpen?, src?).
 * @returns {Element | null} - –°–æ–∑–¥–∞–Ω–Ω—ã–π DOM-—ç–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
export function createBlockElement(blockData) {
    // 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!blockData || typeof blockData !== 'object') {
        console.error('[createBlockElement] Error: Invalid or missing blockData argument.');
        return null;
    }

    const currentNextBlockId = getNextBlockIdAndIncrement();
    const finalBlockData = {
        id: blockData.id ?? (currentNextBlockId - 1),
        type: blockData.type ?? 'p',
        listType: blockData.listType ?? null,
        indentLevel: blockData.indentLevel ?? 0,
        checked: blockData.checked ?? false,
        html: blockData.html ?? '',
        inQuote: blockData.inQuote ?? false,
        children: blockData.children ?? [],
        titleHtml: blockData.titleHtml ?? '',
        isOpen: blockData.isOpen ?? false,
        src: blockData.src ?? null, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    };

     if (typeof finalBlockData.id !== 'number' || isNaN(finalBlockData.id)) {
         console.warn(`[createBlockElement] Invalid ID found or generated (${finalBlockData.id}), assigning new one.`);
         finalBlockData.id = getNextBlockIdAndIncrement();
     }

    if (finalBlockData.id >= (currentNextBlockId - 1)) {
         setNextBlockId(finalBlockData.id + 1);
    }

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–ª–æ–∫–∞ (div.editor-block)
    const blockDiv = document.createElement('div');
    blockDiv.className = 'editor-block';
    blockDiv.setAttribute('data-block-id', String(finalBlockData.id));
    blockDiv.setAttribute('data-block-type', finalBlockData.type);

    // +++ –î–û–ë–ê–í–õ–Ø–ï–ú –†–£–ß–ö–£ –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø +++
    const dragHandle = document.createElement('div');
    dragHandle.className = 'drag-handle';
    dragHandle.setAttribute('aria-hidden', 'true');
    dragHandle.innerHTML = `
        <svg width="12" height="18" viewBox="0 0 12 18" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <circle cx="3" cy="3" r="1.5"/>
            <circle cx="9" cy="3" r="1.5"/>
            <circle cx="3" cy="9" r="1.5"/>
            <circle cx="9" cy="9" r="1.5"/>
            <circle cx="3" cy="15" r="1.5"/>
            <circle cx="9" cy="15" r="1.5"/>
        </svg>
    `;
    blockDiv.appendChild(dragHandle);
    // +++ –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –†–£–ß–ö–ò +++


    // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ê—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    if (finalBlockData.listType) {
         blockDiv.setAttribute('data-list-type', finalBlockData.listType);
    }
    if (finalBlockData.indentLevel > 0) {
        blockDiv.setAttribute('data-indent-level', String(finalBlockData.indentLevel));
    } else {
        blockDiv.removeAttribute('data-indent-level'); // –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    }
    if (finalBlockData.type === 'todo') {
        blockDiv.setAttribute('data-checked', String(finalBlockData.checked));
    }
    if (finalBlockData.inQuote) {
        blockDiv.setAttribute('data-in-quote', 'true');
    }
    if (finalBlockData.type === 'toggle') {
        blockDiv.setAttribute('data-is-open', String(finalBlockData.isOpen));
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º src –¥–ª—è image, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    if (finalBlockData.type === 'image' && finalBlockData.src) {
         blockDiv.setAttribute('data-image-src', finalBlockData.src);
    }


    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
    switch (finalBlockData.type) {
        case 'callout':
            blockDiv.classList.add('callout-block');
            const icon = document.createElement('div');
            icon.className = 'callout-icon';
            icon.textContent = 'üí°';
            icon.setAttribute('contenteditable', 'false');
            icon.setAttribute('aria-hidden', 'true');
            blockDiv.appendChild(icon);
            const calloutWrapper = document.createElement('div');
            calloutWrapper.className = 'callout-content-wrapper';
            blockDiv.appendChild(calloutWrapper);
            if (!Array.isArray(finalBlockData.children) || finalBlockData.children.length === 0) {
                const firstChildData = { type: 'p', html: finalBlockData.html };
                const firstChildElement = createBlockElement(firstChildData);
                if (firstChildElement) { calloutWrapper.appendChild(firstChildElement); }
            }
            break;

        case 'toggle':
            const indicatorContainer = document.createElement('div');
            indicatorContainer.className = 'toggle-indicator-container';
            const indicator = document.createElement('div');
            indicator.className = 'toggle-indicator';
            indicator.setAttribute('contenteditable', 'false');
            indicator.setAttribute('aria-hidden', 'true');
            indicatorContainer.appendChild(indicator);

            const mainContentDiv = document.createElement('div');
            mainContentDiv.className = 'toggle-main-content';
            const titleDiv = document.createElement('div');
            titleDiv.className = 'toggle-title';
            titleDiv.setAttribute('contenteditable', 'true');
            // titleDiv.setAttribute('spellcheck', 'false'); // <-- –ë–´–õ–û –û–¢–ö–õ–Æ–ß–ï–ù–û
            titleDiv.setAttribute('spellcheck', 'true');  // <-- –í–ö–õ–Æ–ß–ï–ù–û
            titleDiv.innerHTML = finalBlockData.titleHtml || '';

            const childrenWrapper = document.createElement('div');
            childrenWrapper.className = 'toggle-children-wrapper';
            mainContentDiv.appendChild(titleDiv);
            mainContentDiv.appendChild(childrenWrapper);
            blockDiv.appendChild(indicatorContainer);
            blockDiv.appendChild(mainContentDiv);

            if (!Array.isArray(finalBlockData.children) || finalBlockData.children.length === 0) {
                 const firstChildData = { type: 'p', html: '' };
                 const firstChildElement = createBlockElement(firstChildData);
                 if (firstChildElement) { childrenWrapper.appendChild(firstChildElement); }
            }
            break;

        case 'li':
            const listMarkerSpan = document.createElement('span');
            listMarkerSpan.className = 'list-marker';
            listMarkerSpan.setAttribute('aria-hidden', 'true');
            listMarkerSpan.setAttribute('contenteditable', 'false');
            blockDiv.appendChild(listMarkerSpan);

            const liContent = document.createElement('div');
            liContent.className = 'block-content';
            liContent.setAttribute('contenteditable', 'true');
            // liContent.setAttribute('spellcheck', 'false'); // <-- –ë–´–õ–û –û–¢–ö–õ–Æ–ß–ï–ù–û
            liContent.setAttribute('spellcheck', 'true');  // <-- –í–ö–õ–Æ–ß–ï–ù–û
            liContent.innerHTML = finalBlockData.html ?? '';
            blockDiv.appendChild(liContent);
            break;

        // --- –ù–û–í–´–ô CASE –î–õ–Ø IMAGE ---
        case 'image':
            blockDiv.classList.add('image-placeholder-block'); // –ö–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞

             // –ï—Å–ª–∏ –µ—Å—Ç—å src (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
             if (finalBlockData.src) {
                 const imgElement = document.createElement('img');
                 imgElement.src = finalBlockData.src;
                 imgElement.alt = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å alt —Ç–µ–∫—Å—Ç –ø–æ–∑–∂–µ
                 imgElement.style.maxWidth = '100%'; // –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
                 imgElement.style.display = 'block'; // –ß—Ç–æ–±—ã –∑–∞–Ω–∏–º–∞–ª –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
                 blockDiv.appendChild(imgElement);
                 blockDiv.classList.remove('image-placeholder-block'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
             }
             // –ò–Ω–∞—á–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
             else {
                 const placeholderContent = document.createElement('div');
                 placeholderContent.className = 'image-placeholder-content';

                 const placeholderIcon = document.createElement('span');
                 placeholderIcon.className = 'image-placeholder-icon';
                 placeholderIcon.innerHTML = '<img src="Icons/Image.svg" alt="Image Icon">'; // –ò–∫–æ–Ω–∫–∞

                 const placeholderText = document.createElement('span');
                 placeholderText.className = 'image-placeholder-text';
                 placeholderText.textContent = '–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';

                 placeholderContent.appendChild(placeholderIcon);
                 placeholderContent.appendChild(placeholderText);
                 blockDiv.appendChild(placeholderContent);
             }
             // –ù–µ—Ç contenteditable —ç–ª–µ–º–µ–Ω—Ç–∞, spellcheck –Ω–µ –Ω—É–∂–µ–Ω
             break;
        // --- –ö–û–ù–ï–¶ CASE IMAGE ---

        case 'quote': // Fallthrough
        case 'todo':  // Fallthrough
        case 'p':     // Fallthrough
        case 'h1':    // Fallthrough
        case 'h2':    // Fallthrough
        case 'h3':    // Fallthrough
        default:
            if (finalBlockData.type === 'quote' || finalBlockData.inQuote) {
                const quoteIndicator = document.createElement('div');
                quoteIndicator.className = 'quote-indicator';
                blockDiv.appendChild(quoteIndicator);
            }
            if (finalBlockData.type === 'todo') {
                const checkbox = document.createElement('span');
                checkbox.className = 'block-checkbox';
                checkbox.setAttribute('contenteditable', 'false');
                blockDiv.appendChild(checkbox);
            }
            const content = document.createElement('div');
            content.className = 'block-content';
            content.setAttribute('contenteditable', 'true');
            // content.setAttribute('spellcheck', 'false'); // <-- –ë–´–õ–û –û–¢–ö–õ–Æ–ß–ï–ù–û
            content.setAttribute('spellcheck', 'true');  // <-- –í–ö–õ–Æ–ß–ï–ù–û
            content.innerHTML = finalBlockData.html ?? '';
            blockDiv.appendChild(content);
            break;
    }

    return blockDiv;
};